/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package genpopulatedb.vista;

import genpopulatedb.datos.Entidad;
import genpopulatedb.negocio.Conexion;
import genpopulatedb.negocio.ControllerEntidad;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author daudth
 */
public class EntitiesMetadata extends javax.swing.JDialog {
    private ControllerEntidad ce;

    public EntitiesMetadata(java.awt.Frame parent, boolean modal,Conexion conexion) {
        super(parent, modal);
        initComponents();
        ce=ControllerEntidad.getInstance(conexion);
        cargarTablas();
    }
    public void cargarTablas(){
        tableEntities.setModel(new AbsTableModel(ce.getEntidads()));
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableEntities = new javax.swing.JTable();
        cbSeleccion = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        tableEntities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableEntities);

        cbSeleccion.setText("Seleccionar todo");
        cbSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSeleccionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbSeleccion)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(cbSeleccion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
      int [] rows=tableEntities.getSelectedRows();
      List<Entidad> entidads=new ArrayList<Entidad>();
      AbsTableModel atm=(AbsTableModel) tableEntities.getModel();
      for (int i = 0; i < rows.length; i++) {
          Entidad entidad=(Entidad) atm.getValue(rows[i]);
          entidad.addColumnas(ce.getColumns(entidad.getNombre()));
          entidads.add(entidad);
          
            
        }
      ControllerEntidad.getInstance(null).setEntidadsDisponibles(entidads);
      
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cbSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSeleccionActionPerformed
       if(cbSeleccion.isSelected()){
       tableEntities.selectAll();
       
       }
        
    }//GEN-LAST:event_cbSeleccionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JCheckBox cbSeleccion;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableEntities;
    // End of variables declaration//GEN-END:variables
 class AbsTableModel extends AbstractTableModel {
        private List<Entidad> ListP;
        public AbsTableModel(List<Entidad> ListP) {
            this.ListP = ListP;
           
        }

        public List<Entidad> getListP() {
            return ListP;
        }
        
        
        
        public void add(Entidad Entity) {
            ListP.add(Entity);
            this.fireTableDataChanged();/*disparador q actualiza los datos de la tabla*/
        }

        @Override
        public int getRowCount() {
            if (ListP == null) {
                return 0;
            }
            return ListP.size();
        }

        @Override
        public int getColumnCount() {
            return 4;//*Cantidad de columnoas*/
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Nombre";
                case 1:
                    return "Catalogo";
                case 2:
                    return "Esquema";
                    
                default:
                    return "Tipo";

            }
        }

        @Override
        public Object getValueAt(int row, int column) {/*para obtener datos de cada celda*/
            Entidad C = ListP.get(row);
            
            switch (column) {
                case 0:
                    return C.getNombre();
                case 1:
                    return C.getCatalogo();
                case 2:
                    return C.getEsquema();
                default :
                    return C.getTipo();
                 
            }
        }

        public Object getValue(int row) {//*devuelto toda la fila seleccinada*/
          return  ListP.get(row);
            
        }
      
        

        public void updateDataRow(int index, Entidad entity) {
            ListP.set(index, entity);
            fireTableRowsUpdated(index, index);
        }

        public void removeDataRow(int index) {
            ListP.remove(index);
            fireTableDataChanged();
        }

        public void setList(List list) {
            ListP = list;
            
            fireTableDataChanged();
        }

       
        public void Clear() {
            ListP = new LinkedList<Entidad>();
            fireTableDataChanged();
        }
    }//end ClienteTableModel

}
